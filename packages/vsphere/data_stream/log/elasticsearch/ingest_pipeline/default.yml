---
description: Pipeline for processing sample logs
processors:  
  - set:
      field: ecs.version
      value: '8.4.0'
  - rename:
      field: message
      target_field: event.original
  - grok:
      description: Parse syslog header
      field: event.original
      patterns:
        - '^(%{ECS_SYSLOG_PRI}\d )?%{TIMESTAMP_ISO8601:_tmp.timestamp}%{SPACE}%{HOST}%{SPACE}%{NOTSPACE:process.name} (%{POSINT:process.pid:long}|-) - -%{SPACE}%{GREEDYDATA:message}'
        - '^(%{ECS_SYSLOG_PRI})?%{TIMESTAMP_ISO8601:_tmp.timestamp}%{SPACE}%{NOTSPACE:event.module}\s%{NOTSPACE}:\s%{NOTSPACE:log.level}\s%{DATA:process.name}\[%{POSINT:process.pid:long}\]\s\[%{DATA:_temp_.data}\]\s((Event\s%{INT:event.code:long}\s:\s)|(%{DATA:event.action}:\s))%{GREEDYDATA:message}'
        - '^(%{ECS_SYSLOG_PRI})?%{TIMESTAMP_ISO8601:_tmp.timestamp}%{SPACE}%{NOTSPACE:event.module}\s%{DATA:process.name}\[%{POSINT:process.pid:long}\]:\s\[%{NOTSPACE}\s%{DATA:_temp_.kv}\]'
      pattern_definitions:
        ECS_SYSLOG_PRI: '<%{NONNEGINT:log.syslog.priority:long}>'
        TIMESTAMP_ISO8601: '%{YEAR}-%{MONTHNUM}-%{MONTHDAY}[T ]%{HOUR}:?%{MINUTE}(?::?%{SECOND})?%{ISO8601_TIMEZONE:event.timezone}?'
        HOST: '(?:%{IP:host.ip}|%{HOSTNAME:host.name})'

  - grok:
      field: message
      if: ctx.message != null
      patterns:
        - '^%{EVENT1}'
        - '^%{EVENT2}'
        - '^%{GREEDYDATA:message}'
      pattern_definitions:
        EVENT1: "%{TIMESTAMP_ISO8601}(( '%{NOTSPACE:event.action}' %{POSINT})|:) %{LOGLEVEL:log.level} %{GREEDYDATA:message}"
        EVENT2: 'Event \[%{POSINT:event.id}\] %{NOTSPACE} \[%{TIMESTAMP_ISO8601}\] \[%{JAVACLASS:log.logger}\] \[%{LOGLEVEL:log.level}\] \[%{VSPHERE_USER}\] \[(%{NOTSPACE:vsphere.log.datacenter}|)\] \[(%{POSINT}|)\]'
        VSPHERE_USER: '((%{HOSTNAME:user.domain}\\)?%{USERNAME:user.name}|)'
  - date:
      field: _tmp.timestamp
      target_field: '@timestamp'
      formats:
      - ISO8601
  - remove:
      field:
        - _tmp
      ignore_failure: true
  - script:
      lang: painless
      description: This script processor iterates over the whole document to remove fields with null values.
      source: |
        void handleMap(Map map) {
          for (def x : map.values()) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
          }
          map.values().removeIf(v -> v == null);
        }
        void handleList(List list) {
          for (def x : list) {
              if (x instanceof Map) {
                  handleMap(x);
              } else if (x instanceof List) {
                  handleList(x);
              }
          }
        }
        handleMap(ctx);
  - pipeline:
      name: '{{ IngestPipeline "esxi" }}'
      if: ctx.event?.module == "ESXI"
  - set:
      field: event.dataset
      value: "vsphere.log"
      if: ctx.event?.module != "ESXI"
  - set:
      field: event.module
      value: "vsphere"
      if: ctx.event?.module != "ESXI"
  - remove:
      field: event.original
      if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
on_failure:
  - remove:
      field:
        - _tmp
      ignore_failure: true
  - append:
      field: error.message
      value: '{{ _ingest.on_failure_message }}'