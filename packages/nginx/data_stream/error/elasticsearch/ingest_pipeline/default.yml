---
description: Pipeline for parsing the Nginx error logs
processors:
  - pipeline:
      if: ctx.message.startsWith('{')
      name: '{{ IngestPipeline "third-party" }}'
  - set:
      field: event.ingested
      value: '{{_ingest.timestamp}}'
  - set:
      field: ecs.version
      value: '8.0.0'
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
  - grok:
      field: event.original
      patterns:
      - '%{DATA:nginx.error.time} \[%{DATA:log.level}\] %{NUMBER:process.pid:long}#%{NUMBER:process.thread.id:long}:
        (\*%{NUMBER:nginx.error.connection_id:long} )?%{GREEDYMULTILINE:message}'
      pattern_definitions:
        GREEDYMULTILINE: |-
          (.|
          |	)*
      ignore_missing: true
  # Extract KV if possible
  - grok:
      field: message
      ignore_missing: true
      ignore_failure: true
      description: Extract Client Information
      patterns:
        - '(?<_temp_.kv>client.*)'
  # Remove unnecessary stuff from the kv field
  - gsub:
        field: "_temp_.kv"
        pattern: "\"|\\[|\\]"
        replacement: ""
        ignore_missing: true
        if: ctx._temp_?.kv != null
  - kv:
        field: "_temp_.kv"
        field_split: ", "
        value_split: ": "
        target_field: "_temp_"
        if: ctx._temp_?.kv != null
  - grok:
      field: _temp_.client
      ignore_missing: true
      ignore_failure: true
      description: Extract Client Information
      patterns:
        - '%{IP:client.ip}'
        - '%{HOSTNAME:client.domain}'
  - grok:
      field: _temp_.server
      ignore_missing: true
      ignore_failure: true
      description: Extract Server Information
      patterns:
        - '%{IP:server.ip}'
        - '%{HOSTNAME:server.domain}'
  - grok:
      field: _temp_.request
      ignore_missing: true
      ignore_failure: true
      description: Extract Request Information
      patterns:
        - "%{DATA:http.request.method}\\s%{DATA:url.path}\\sHTTP/%{NUMBER:http.version}"
  - rename:
          field: "_temp_.referrer"
          target_field: "http.request.referrer"
          ignore_missing: true
  - grok:
      field: "_temp_.host"
      ignore_missing: true
      ignore_failure: true
      description: Extract destination Server Information
      patterns:
        - "%{IP:destination.ip}:%{NUMBER:destination.port:long}"
        - "%{HOSTNAME:destination.domain}:%{NUMBER:destination.port:long}"
        - "%{IP:destination.ip}"
        - "%{HOSTNAME:destination.domain}"
  - remove:
      field: event.created
      ignore_missing: true
      ignore_failure: true
  - rename:
      field: '@timestamp'
      target_field: event.created
  - date:
      if: ctx.event.timezone == null
      field: nginx.error.time
      target_field: '@timestamp'
      formats:
      - yyyy/MM/dd H:m:s
      on_failure:
      - append:
          field: error.message
          value: '{{ _ingest.on_failure_message }}'
  - date:
      if: ctx.event.timezone != null
      field: nginx.error.time
      target_field: '@timestamp'
      formats:
      - yyyy/MM/dd H:m:s
      timezone: '{{ event.timezone }}'
      on_failure:
      - append:
          field: error.message
          value: '{{ _ingest.on_failure_message }}'
  - remove:
      field: nginx.error.time
  - set:
      field: event.kind
      value: event
  - append:
      field: event.category
      value: web
  - append:
      field: event.type
      value: error
  - remove:
      field: event.original
      if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
  - remove:
      field: _temp_
      ignore_failure: true
      ignore_missing: true
on_failure:
  - set:
      field: error.message
      value: '{{ _ingest.on_failure_message }}'
